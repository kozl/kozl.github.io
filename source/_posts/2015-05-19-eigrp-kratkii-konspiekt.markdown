---
layout: post
title: "EIGRP: краткий конспект"
date: 2015-05-19 12:38:41 +0300
comments: true
categories: network, ccna
---
* Advanced distance-vector routing protocol
* Обнаруживает соседей путём отправки Hello пакетов мультикастом, хранит информацию о них
* Надежная доставка через уведомления о получении сообщения, отправляет сначала мультикастом, если не получил ответ - юникастом
* Рассылает не полную таблицу маршрутов как RIP, а только обновления
* Метрики, основанные на полосе пропускания, задержке, надежности, нагрузке. MTU учитывается, но не участвует в расчёте метрики.
* Расчёт метрики: bandwith маршрута = минимальной bandwith на маршруте, из-за этого расчитывает маршруты точнее, чем OSPF
* Маршрутизаторы хранят все маршруты до искомой сети, выбирается основной (Successor Route), который добавляется в таблицу маршрутизации и резервный (Feasible Route), который будет задействован в случае выхода из строя основного
* Суммирование возможно на любом маршрутизаторе

## Терминология EIGRP

- **DUAL** - Diffusing Update ALgorithm, алгоритм, который используется для вычисления новых маршрутов.
  - **AD** - Advertised Distance, стоимость расстояния между соседом и целевой подсетью
  - **FD** - Feasible Distance, AD + стоимость расстояния между локальным маршрутизатором и соседом
  - **Successor** - маршрут до целевой подсети с наименьшей стоимостью
  - **Feasible** - резервный маршрут, такой, у которого FD меньше чем AD successor'a


#### Типы пакетов

 - **Hello** - для обнаружения соседей, единственный пакет, который не подтверждается
 - **Update** - для обмена маршрутной информацией, основная работа
 - **Query** - запрос маршрутной информацией к соседям
 - **Reply** - ответ на запрос
 - **Ack** - подтверждение

## Стадии установления соседства

1. **R1** и **R2** отправляют Hello мультикастом
2. Получив Hello маршрутизатор вносит отправителя в список своих соседей
3. После установления соседства, роутер с большим IP первым отправляет Update, следом за ним второй, все они подтверждаются.

#### Формула расчёта метрики

$$
\begin{equation}
\mbox{} (Metric = K_1*BW+(\frac{K_2*BW}{256 - Load})+K_3*Delay)*(\frac{K_5}{Reliability+K_4}) \\
\mbox{} BW = (10000000/bandwith(i))*256 \\
\mbox{} Delay = (delay(i))*256 \\
\end{equation}
$$

*bandwith(i)* - минимальное значение bandwith на всём маршруте, в килобитах
*delay(i)* - суммарная задержка на маршруте, измеряется в десятках  микросекунд
*Load* - худшая загрузка на маршруте, измеряется от 1 до 255
*Reliability* - худшее значение надежности на всём маршруте

По умолчанию: 
$$
\begin{align}
\mbox{} K_1=K_3=1, K_2=K_4=K5=0
\end{align}
$$
При таких параметрах формула превращается в такую:

$$
\begin{align}
\mbox{} Metric = BW + Delay
\end{align}
$$


## Балансировка нагрузки

Возможна балансировка по маршрутам с различной метрикой, настраивается параметром variance. Маршруты до подсети считаются эквивалентыми, если FD лучшего маршрута * variance < FD другого маршрута. Маршруты, у которых AD > чем FD лучшего маршрута не участвуют в определении эквивалентных маршрутов - такой механизм нужен для защиты от петель.
